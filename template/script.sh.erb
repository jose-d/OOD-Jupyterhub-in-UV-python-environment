#!/usr/bin/env bash

# input:
minimum_python="3.9"
default_python="3.11"
python_version="<%= context.python %>"
project_path="<%= context.project_path %>"
modules="<%= context.preloaded_modules %>"

echo "dumping ulimit -a info:"
ulimit -a

set -x

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
mkdir -p "${project_path}"
cd "${project_path}"

# get kernel name candidate
kernel_name=$(date +"%Y-%m-%d_%H-%M-%S")

# make sure we have UV
echo "Attempting to self-update uv, alternatively install it:"
uv self update || curl -LsSf https://astral.sh/uv/install.sh | sh

if [ -z "$modules"]; then
	echo "Note: no modules to be loaded, passing.."
else
	module load "${modules}"
fi


# create uv project, if there is none yet in current directory
if [ -f pyproject.toml  ]; then
	# project.toml is already there -> no need to init project
	echo "script.sh: pyproject.toml found"
else
	# project.toml is not yet there. We init project with the minimum python version
	# we do not pin python as it is to be pinned in following logic
	echo "script.sh: Initialising new uv project"
	uv init --python ${minimum_python} --no-pin-python .
	if [ -z "$python_version" ]; then
		# python was not specified, so we pin default python
		uv python pin $default_python
		uv venv
	fi
fi

if [ -z "$python_version" ]; then
	# python_version was kept empty in OOD form, we'll not change anything
	echo "script.sh: python version not set so not doing anything"
else
	echo "script.sh: python version set, so pinning python to $python_version"
	# python_version was set, so we change python:
	uv python pin $python_version
	uv venv <%= context.project_path %>
fi

uv add pip

source .venv/bin/activate

uv add --dev ipykernel
uv run ipython kernel install --user --name=${kernel_name}
uv run --with jupyter,python-lsp-server[all],jupyterlab-lsp,python-language-server,jupyter_scheduler jupyter lab \
	--KernelApp.kernel_name="$kernel_name" \
	--KernelSpecManager.allowed_kernelspecs="$kernel_name" \
        --config="${CONFIG_FILE}" \
	<%= context.extra_jupyter_args %>
